const bodyParser = require('body-parser')
const app = require('express')()
const rateLimit = require('express-rate-limit')
const fs = require('fs')
const launch = require('launch-editor')
const { kebabCase } = require('scule')

const limiter = rateLimit({
  windowMs: 1 * 60 * 1000, // 1 minute
  max: 60
})

app.use(bodyParser.json())
app.use(limiter)

app.post('/add', async (req, res) => {
  const { path, settings } = req.body
  if (!path) throw new Error('Missing required path attribute.')
  if (typeof path !== 'string' || !/^[a-zA-Z0-9]+$/.test(path)) throw new Error('Unsupported value provided for the path attribute.')

  const prefix = kebabCase(settings.component).replace('-', '/') + '/'
  const dest = 'components/' + path.replace(settings.component, prefix) + '.vue'
  const dir = `components/${prefix}`

  let imports = ''
  let exports = []

  // Use mixin if provided by the module.
  if (settings.mixins) {
    imports = Object.entries(settings.mixins).map(([mixin, module]) => `import { ${mixin} } from '${module}'\r\n`) + '\r\n'
    const mixins = Object.keys(settings.mixins).map((mixin) => mixin)
    exports.push(`  mixins: [${mixins.join(', ')}],`)
  }

  // Otherwise define props manually.
  else if (settings.props) {
    exports = [
      '  data: ({ value }) => ({ model: value }),',
      '  props: [',
      ...settings.props.map((o) => `    '${o.key}',`),
      '  ],'
    ]
  }

  // Build Druxt settings.
  if (typeof settings.druxt === 'object') {
    const druxt = {}
    for (const [key, value] of Object.entries(settings.druxt)) {
      const parts = key.split('.')
      let pointer = druxt
      let comment = false
      while (parts.length) {
        let part = parts.shift()
        if (part.includes('//')) {
          part = part.replace('//', '')
          comment = true
        }
        if (parts.length) {
          pointer[part] = pointer[part] || {}
          pointer = pointer[part]
        }
        else {
          pointer[part] = (comment ? '// ' : '') + `${part}: ${JSON.stringify(value)}`
        }
      }
    }
    const formatRecrusive = (item, depth = 2) => {
      for (const [key, value] of Object.entries(item)) {
        if (typeof value === 'object') {
          exports.push(`${" ".repeat(depth * 2)}${key}: {`)
          formatRecrusive(value, depth + 1)
          exports.push(`${" ".repeat(depth * 2)}},`)
        }
        else if (typeof value === 'string') {
          exports.push(`${" ".repeat(depth * 2)}${value},`)
        }
      }
    }

    exports.push('\r\n  druxt: {')
    formatRecrusive(druxt)
    exports.push('  },')
  }

  const template = `<!-- Generated by the Druxt devel template server middleware. -->
<template>
  <div>
    <DruxtDebug :json="${settings.debug || 'model'}" />
  </div>
</template>

<script>
${imports}export default {
${exports.join('\r\n')}
}
</script>
`

  await fs.promises.mkdir(dir, { recursive: true })
  fs.writeFile(dest, template, (err) => {
    if (err) {
      console.error(err.message)
      res.status(500)
      return
    }
    launch(dest)
    res.json({ file: dest })
  })
})

module.exports = app
