import consola from 'consola'
import dmd from 'dmd'
import fs from 'fs'
import globby from 'globby'
import jsdoc2md from 'jsdoc-to-markdown'
import mkdirp from 'mkdirp'
import ncp from 'ncp'
import path from 'path'
import vueDocs from 'vue-docgen-api'

const cwd = path.join(__dirname, '..')

/**
 * DruxtDocgen class.
 */
class DruxtDocgen {
  constructor() {
    this.components = []
    this.destination = 'docs/content'
  }

  /**
   * Generate documentation for source JS and Vue files.
   */
  async generateDocs() {
    consola.info('Generating docs')

    /**
     * Generate API documents.
     */
    await this.generateApiDocs()

    /**
     * Generate list of packages.
     */
    await this.generatePackageList()

    /**
     * Generate list of components.
     */
    await this.generateComponentsList()

    /**
     * Copy external files to the generated files.
     */
    await this.copyFiles()
  }

  /**
   * Copy external files to the generated files.
   */
  async copyFiles() {
    consola.info('Copying files')

    // Changelogs.
    const changelogs = await globby('packages/*/CHANGELOG.md')
    for (const file of changelogs) {
      const module = file.split('/')[1]
      const destination = `${this.destination}/api/packages/${module}/CHANGELOG.md`
      const options = {
        transform: (read, write) => {
          // Append frontmatter
          write.write("---\ntitle: Release notes\n---\n\n")
          read.pipe(write)
        }
      }
      await ncp(file, destination, options, () => {})
    }

    // Contributing guide.
    await ncp('CONTRIBUTING.md', `${this.destination}/guide/CONTRIBUTING.md`)
  }

  /**
   * Generate API documents.
   */
  async generateApiDocs() {
    consola.info('Generating API documents')

    const files = await globby([
      // Javascript.
      'packages/*/src/**/*.js',
      // Vue.js.
      'packages/*/src/components/**/*.vue',
      // Exclude fixtures, mocks and tests.
      '!**/__*__/**/*',
    ])

    for (const file of files) {
      // Get JSDoc template data from file.
      const templateData = jsdoc2md.getTemplateDataSync({
        configure: path.resolve(__dirname, '../jsdoc.json'),
        files: file,
      })

      // Process file based on extension.
      if (file.match(/\.js$/)) {
        await this.processJs(file, templateData)
      }
      else {
        this.components.push({ file, templateData })
        await this.processVue(file, templateData)
      }

      this.writeTemplateData(file, templateData)
    }
  }

  /**
   * Generate list of components.
   */
  async generateComponentsList() {
    consola.info('Generating components list')

    const components = this.components
      .filter((o) => o && o.file.split('/').length === 5 && o.templateData[0])
      .map(({ file, templateData }) =>
        `## ${templateData[0].name}

${templateData[0].description}

[Read the docs](/api/${file.replace('src/', '').replace('.vue', '')})
`)

    const destination = this.destination + '/api/components.md'
    mkdirp.sync(path.dirname(destination))

    fs.writeFileSync(destination, `---
title: Components
---
${components.join('\n* * *\n\n')}

* * *

_Note: The contents of this file where automatically generated by the [Druxt Docgen](https://github.com/druxt/druxt.js/tree/develop/packages/docgen)._
`)
  }

  /**
   * Generate list of packages.
   */
  async generatePackageList() {
    consola.info('Generating package list')

    const packageFiles = await globby('packages/*/package.json')
    const packages = packageFiles
      // Load package data.
      .map((file) => ({
        ...require(path.resolve(__dirname, '../../..', file)),
        __dir: file.split('/')[1],
      }))
      // Filter and sort data
      .filter((o) => !o.private)
      .sort((a, b) => a.name < b.name ? -1 : 1)
      // Process package data.
      .map((pkg) =>
        `## ${pkg.name}

<div class="text-sm">

Version: [${pkg.version}](/api/packages/${pkg.__dir}/CHANGELOG)

</div>

${pkg.description}

[Read the docs](/api/packages/${pkg.__dir}/)
`)

    const destination = this.destination + '/api/README.md'
    mkdirp.sync(path.dirname(destination))

    fs.writeFileSync(destination, `---
title: Packages
---

${packages.join('\n* * *\n\n')}

* * *

_Note: The contents of this file where automatically generated by the [Druxt Docgen](https://github.com/druxt/druxt.js/tree/develop/packages/docgen)._
`)
  }

  /**
   * Process Javascript files.
   */
  async processJs(file, templateData) {
    templateData.map(item => {
      // Vuex state scope fix.
      if (item.name === 'state' && item.scope === 'inner') {
        delete item.scope
      }

      // Vuex mutations/@mutator tag suport.
      if (item.mutators) {
        item.description = item.mutators[0].description
        item.kind = 'method'
        item.scope = 'mutation'
      }
    })
  }

  /**
   * Process Vue.js files.
   */
  async processVue(file, templateData) {
    // Get data from vue-docgen-api.
    const data = await vueDocs.parse(file)

    templateData.map(item => {
      const parts = item.id.split('.')
      if (item.memberof === null && parts.length > 1) {
        parts.pop()
        item.memberof = parts.join('.')
      }

      // @vue-computed tag support.
      if (item._vueComputed) {
        // Strip out HTML table from description.
        item.description = item.description.replace(/<\/p.*/ms, '')

        item._vueComputed.map(property => {
          templateData.push({
            id: `module:${data.displayName}.computed.${property.name}`,
            longname: `module:${data.displayName}.computed.${property.name}`,
            kind: 'property',
            scope: 'static',
            memberof: `module:${data.displayName}.computed`,

            ...property
          })
        })
      }

      // Vue.js Computed properties fixes.
      if (parts[1] === 'computed' && parts.length === 2) {
        item.kind = 'property'
      }
    })
  }

  /**
   * Write template data to file system.
   *
   * @param {string} file - The file name.
   * @param {*} data - The JSDoc / Vuedoc generated data.
   */
  writeTemplateData(file, templateData) {
    if (!templateData) return

    const content = dmd(templateData, {
      'example-lang': 'vue',
      'heading-depth': 2,
      partial: [
        path.resolve(cwd, 'partials/main.hbs'),
        path.resolve(cwd, 'partials/sig-name.hbs')
      ],
      separators: true
    })
    if (!content) return

    const destination = `${this.destination}/api/${file.replace('src/', '').replace(/\.[^/.]+$/, '.md')}`
    mkdirp.sync(path.dirname(destination))

    // Build frontmatter.
    const name = templateData[0].id.split(':').pop()
    const frontmatter = `---\ntitle: ${name}\n---\n\n`

    fs.writeFileSync(destination, frontmatter + content)
  }
}

export { DruxtDocgen }
